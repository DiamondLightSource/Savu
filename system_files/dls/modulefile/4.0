#%Module1.0#####################################################################
##
## Savu modulefile
##

proc ModulesHelp { } {
	global savu_version

        puts stderr "\tLoads version $savu_version of Savu"
        puts stderr "\n\tSavu is a pipeline for running tomography "
        puts stderr "\treconstruction routines on the cluster at diamond.\n"
}

module load global/directories


if { [info exists env(SAVUHOME)] } {
	set gitrepo $env(SAVUHOME)
}


set hostname [eval exec "cat /proc/sys/kernel/hostname"]
if { [regexp -nocase {cs03r-sc-serv-39} $hostname] } {
	puts stderr "\t Unfortunately Savu won't work on this node, please start a new nx session."
	exit
} elseif { [regexp -nocase {cs03r-sc-serv-40} $hostname] } {
	puts stderr "\t Unfortunately Savu won't work on this node, please start a new nx session."
	exit
} else {
	#============================================================================
	# When creating a new module, update these variables.
	set savu_version 4.0
	set mpi_version 4.1.1
	set PYTHON_HOME /dls_sw/apps/savu/4.0/miniconda
	set hebi /dls_sw/apps/savu/hebi
	#============================================================================	
}


set mach $tcl_platform(machine)
module-whatis "loads Savu version $savu_version"
set mach $tcl_platform(machine)
if { [string compare $mach "x86_64"] != 0} {
    puts stderr "Cannot load/unload: this is for 64-bit machines only!"
    return 1
}
set arch 64


if { [module-info mode load] } {

  # load openmpi shared libraries
  if { ! [is-loaded openmpi/$mpi_version] } {
    if { [is-loaded openmpi] } {
        module unload openmpi
    }
    module load openmpi/$mpi_version
  }


  if { ! [info exists env(SAVU_PRERELEASE)] } {
  	puts stderr "\n\t\t    ********************************************"
  	puts stderr "\t\t    *         Loading Savu version $savu_version         *"
  	puts stderr "\t\t    ********************************************\n"
  }
  puts stderr "  ************************* IMPORTANT NOTICES *************************"
  puts stderr "  (1) Please ensure savu is the only module loaded in a fresh terminal."
  puts stderr "  (2) When using savu_mpi, please output to a visit directory.\n"

} else {
  puts stderr "\n\tUnloading Savu version $savu_version"

  # unload openmpi shared libraries
  if { [is-loaded openmpi/$mpi_version] } {
    module unload openmpi/$mpi_version
  }

  if { [info exists env(SAVUHOME)] } {
	unsetenv SAVUHOME
	puts stderr "Cleaning up SAVUHOME"
  }

}

setenv PYTHONNOUSERSITE True
prepend-path PATH $PYTHON_HOME/bin
prepend-path PATH $hebi

module add fastxrf

set-alias "savu_mpi" "savu_launcher.sh -s $savu_version"
set-alias "savu_mpi_auto" "savu_launcher.sh -s $savu_version -t AUTO"
set-alias "savu_mpi_preview" "savu_launcher.sh -s $savu_version -t PREVIEW"
set-alias "savu_mpi_com14" "savu_launcher.sh -s $savu_version -t BIG"

if { [info exists gitrepo] } {
  prepend-path PATH $gitrepo
  prepend-path PYTHONPATH $gitrepo
  prepend-path PYTHONPATH $gitrepo/scripts  # required for the configurators
  set-alias "savu_mpi_dev" "$gitrepo/system_files/dls/mpi/savu_launcher.sh -s $savu_version -i"
  set-alias "savu_mpi_local" "$gitrepo/system_files/dls/mpi/savu_mpijob_local.sh"
  set-alias "savu_config" "python -m config_generator.savu_config"
  set-alias "savu" "python $gitrepo/savu/tomo_recon.py"
  set-alias "savu_citations" "python $gitrepo/scripts/citation_extractor/citation_extractor.py"
} else {
  set-alias "savu" "savu -s cs04r-sc-serv-14"
  set-alias "savu_mpi_local" "savu_mpijob_local.sh"
}

