
I12 JEEP Savu
-------------------


.. raw:: html

    <!DOCTYPE html>
    <html>
        <head>
            <title>I12 JEEP : SAVU Tomography Reconstruction</title>
            <link rel="stylesheet" href="styles/site.css" type="text/css" />
            <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
        </head>

        <body class="theme-default aui-theme-default">
            <div id="page">
                <div id="main" class="aui-page-panel">


                    <div id="content" class="view">
                        <div class="page-metadata">







                Created by <span class='author'> Thomas Connolley</span>
                        <div id="main-content" class="wiki-content group">
                        <p>Link to Savu Diamond User Guide (copied 02 March 2017):</p><p>
                        <a class="external-link" href="file:///dls/science/groups/das/SavuTraining/doc/build/user_guides/user_training.html" rel="nofollow">file:///dls/science/groups/das/SavuTraining/doc/build/user_guides/user_training.html</a></p><p><span style="color: rgb(255,0,0);"><strong>Update 02/04/2019:</strong></span></p><p><span style="color: rgb(0,0,0);">I12 data were migrated to the new cluster (named Hamilton). To process data on this new cluster using the following commands</span></p><p><span style="color: rgb(255,0,0);">module load savu</span></p><p><span style="color: rgb(0,0,0);">To use the latest plugins:</span></p><p><span style="color: rgb(255,0,0);">module load savu/pre-release</span></p><p><span style="color: rgb(0,0,0);">To check the status, manage the jobs submit to this new cluster using the following commands:</span></p><p><span style="color: rgb(255,0,0);">module load hamilton </span></p><p><span style="color: rgb(0,0,255);">Do <strong>not</strong> run &quot;module load hamilton&quot; in the same Terminal window in which you run &quot;module load savu/i12&quot;! - you may not be able to run the reconstruction with savu correctly.</span></p><p><span style="color: rgb(0,0,0);"><span style="color: rgb(255,0,0);">qstat</span>  → Check the status of the job</span></p><p><span style="color: rgb(0,0,0);"><span style="color: rgb(255,0,0);">watch qstat</span> → Check the live status of the job, quit by Ctrl +C</span></p><p><span style="color: rgb(0,0,0);"><span style="color: rgb(255,0,0);">qdel</span> &lt;jobID&gt; → Kill a job</span></p><p><span style="color: rgb(0,0,0);"><span style="color: rgb(255,0,0);">qdel -u</span> &lt;FedID&gt; → Kill all jobs submitted by users with the &lt;FedID&gt;</span></p><p><span style="color: rgb(255,0,0);">Using the known commands (e.g module load global/cluster, module load savu) will run computing on the old cluster but access data from the new cluster. This impacts the Savu's performance and raise bugs.</span></p><p><strong style="color: rgb(0,0,0);font-size: 24.0px;letter-spacing: 0.0px;">I-Quick guide</strong></p><p><strong><span style="letter-spacing: 0.0px;">1-Create a processing list:</span></strong></p><p><span style="letter-spacing: 0.0px;">   Processing list: List of processing steps which users use to process their data. Example: load data, apply flat-field correction, apply zinger removal method, apply ring removal method, then do reconstruction. </span></p><p><span style="letter-spacing: 0.0px;">   -  Open terminal, type:</span></p><p><span style="color: rgb(255,0,0);">  <span style="color: rgb(0,0,0);">-&gt;</span> module load savu</span></p><p><span style="color: rgb(255,0,0);">  <span style="color: rgb(0,0,0);">-&gt;</span> savu_config </span></p><p>   <span style="color: rgb(0,0,255);">- To list available plugins, use the command &quot;list &lt;key-word&gt;&quot;. Example:</span></p><p>  -&gt; <span style="color: rgb(255,0,0);">list loader</span>              : will return a list of plugins having name * loader *. Example: NxtomoLoader, ImageLoader, ...</p><p>  -&gt; <span style="color: rgb(255,0,0);">list ring </span>                 : return: RingRemovalWaveletfft, RingRemovalNormalization, ...</p><p>  -&gt; <span style="color: rgb(255,0,0);">list correction </span>       : return: DarkFlatFieldCorrection, DistortionCorrection, ...</p><p>  <span style="color: rgb(0,0,255);"> - To add a plugin to the processing list, use the command &quot;add &lt;plugin&gt; &lt;position&gt;&quot;. Example:</span></p><p>  -&gt;<span style="color: rgb(255,0,0);"> add NxtomoLoader 1</span>                        : add NxtomoLoader plugin to position 1 of the list.</p><p>  -&gt;<span style="color: rgb(255,0,0);"> add DarkFlatFieldCorrection 2</span>          : add DarkFlatFieldCorrection plugin to position 2 of the list.</p><p>  -&gt; <span style="color: rgb(255,0,0);">add DezingerSinogram 3</span>                  : add DezingerSinogram plugin to position 3 of the list.</p><p>  -&gt; <span style="color: rgb(255,0,0);">add VoCentering 4</span>                            : add VoCentering plugin to position 4 of the list.</p><p><span style="color: rgb(0,0,255);">  - To change the position of a plugin, use the command &quot;move &lt;current-position&gt; &lt;new-position&gt;&quot;. Example:</span></p><p>  -&gt; <span style="color: rgb(255,0,0);">move 4 3</span>            : move plugin at position 4 to position 3.  </p><p><span style="color: rgb(0,0,255);"> - To remove a plugin, use the command &quot;rem &lt;position&gt;&quot;. Example:</span></p><p>  -&gt; <span style="color: rgb(255,0,0);">rem 3</span>                 : remove a plugin at position 3, positions of other plugins will be updated.</p><p><span style="color: rgb(0,0,255);"> - To turn on/off a plugin, use the command &quot;set &lt;position&gt; on/off&quot;. Example:</span></p><p>  -&gt;<span style="color: rgb(255,0,0);"> set 3 off </span>          : not use plugin 3</p><p>  -&gt; <span style="color: rgb(255,0,0);">set 3 on</span>           : use plugin 3</p><p> <span style="color: rgb(0,0,255);">- To display the current list of plugin, use the command  &quot;disp&quot; with options: &quot;-a&quot;, &quot;-v&quot;, or &quot;-vv&quot;. Example:</span></p><p><span style="color: rgb(0,0,255);"><span style="color: rgb(0,0,0);">  -&gt;</span> <span style="color: rgb(255,0,0);">disp</span>                <span style="color: rgb(0,0,0);"> : Show the current list of plugin.</span></span></p><p><span style="color: rgb(0,0,255);"><span style="color: rgb(0,0,0);">  -&gt;</span> <span style="color: rgb(255,0,0);">disp -a </span>           <span style="color: rgb(0,0,0);"> : Show the list of plugin with detail parameters of each plugin.</span></span></p><p><span style="color: rgb(0,0,255);"><span style="color: rgb(0,0,0);">  -&gt;</span> <span style="color: rgb(255,0,0);">disp -a -v </span>       <span style="color: rgb(0,0,0);">: Show the list of plugin with detail parameters of each plugin + description of each parameter.</span></span><span style="color: rgb(0,0,0);"> </span></p><p><span style="color: rgb(0,0,255);"><span style="color: rgb(0,0,0);">  -&gt;</span> <span style="color: rgb(255,0,0);">disp -a -vv </span>     <span style="color: rgb(0,0,0);">  : Show the list of plugin with detail parameters of each plugin + description of each parameter + description of the plugins.</span></span><span style="color: rgb(0,0,0);"> </span></p><p><span style="color: rgb(0,0,255);">- To display the content of a plugin, use the command  &quot;disp &lt;position&gt;&quot; with options: &quot;-a&quot;, &quot;-v&quot;, or &quot;-vv&quot;. Example:</span></p><p><span style="color: rgb(0,0,255);"><span style="color: rgb(0,0,0);"> -&gt;</span><span style="color: rgb(0,0,255);"> </span><span style="color: rgb(255,0,0);">disp 2 -a -v</span></span></p><p><span style="color: rgb(0,0,255);">- To save the processing list (as nxs format), use the command &quot;save &lt;file-path&gt;&quot;. Example:</span></p><p><span style="color: rgb(0,0,255);"> <span style="color: rgb(0,0,0);">-&gt; </span><span style="color: rgb(255,0,0);">save /dls/i12/data/2018/processing/savu_list.nxs</span></span></p><p><span style="color: rgb(0,0,255);"><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,255);">- To open an existing processing list, use the command &quot;open &lt;file-path&gt;&quot;. Example:</span></span></span></p><p><span style="color: rgb(0,0,255);"><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,255);"><span style="color: rgb(0,0,255);"> </span><span style="color: rgb(0,0,0);">-&gt; <span style="color: rgb(255,0,0);">open</span></span><span style="color: rgb(255,0,0);"> /dls/i12/data/2018/processing/savu_list.nxs</span><br/></span></span></span></p><p><span style="color: rgb(0,0,255);">- To save the current status of an opened processing list:</span> </p><p><span style="color: rgb(0,0,0);">-&gt; </span><span style="color: rgb(255,0,0);">save -i</span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,255);">- End editing a processing list:</span> </span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">-&gt;</span> exit</span></p><blockquote><p><span style="color: rgb(255,102,0);"><strong><em>Note: You need to exit processing list editor to use other commands in a Linux terminal.</em></strong></span></p></blockquote><p><strong><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">2- Change parameters of each plugin</span></span></strong></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">  Each plugin has its own parameters which users may need to edit to get the best results (there're default parameters when users add a plugin).</span></span></p><p><span style="color: rgb(0,0,255);">- To modify a parameter, use the command &quot;mod &lt;plugin-position&gt;.&lt;parameter-position&gt; &lt;new-value&gt;&quot;. Example:</span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> -&gt; <span style="color: rgb(255,0,0);">mod 2.1 0.002 </span>              : Change parameter 1 of plugin 2 from the current value to 0.002  </span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,255);">- To do parameter tuning, use the command &quot;mod &lt;plugin-position&gt;.&lt;parameter-position&gt; &lt;start:stop:step;&gt;&quot;. Example:</span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);"> -&gt; </span><span style="color: rgb(255,0,0);">mod 2.1 31:71:2;           <span style="color: rgb(0,0,0);">: Apply parameter tuning in the range of 31-71 with the step of 2. Note there's semi-colon at the end.</span></span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,255);">- To use a list of distinct values, use the command &quot;mod &lt;plugin-position&gt;.&lt;parameter-position&gt; &lt;value_1; value_2; ...; value_N&gt;&quot;. Example:</span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);"> -&gt; <span style="color: rgb(255,0,0);">mod 2.1 31;35;71          <span style="color: rgb(0,51,102);">: Use 3 distinct values: 31, 35,71</span></span></span></span><span style="color: rgb(0,0,0);"><br/></span></span></p><p><strong><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">3- Process a data set using the created processing list</span></span></strong></p><p><span style="color: rgb(0,0,255);">- To process a data-set running on local machine (e.g there's plugin doesn't use GPU can run locally) , use the following commands:</span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> -&gt; <span style="color: rgb(255,0,0);">savu &lt;full-path-input&gt; &lt;processing-list&gt; &lt;full-path-output&gt;</span></span></span></p><p><span style="color: rgb(0,0,255);">- To process a data-set running on cluster (com10) , use the command:</span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);"> -&gt; </span><span style="color: rgb(255,0,0);">savu_mpi_preview &lt;full-path-input&gt; &lt;processing-list&gt; &lt;full-path-output&gt;    <span style="color: rgb(0,0,0);">: For quick reconstruction few slices</span></span><br/></span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);"> -&gt; </span><span style="color: rgb(255,0,0);">savu_mpi &lt;full-path-input&gt; &lt;processing-list&gt; &lt;full-path-output&gt;</span><br/></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,255);">- To process a data-set running on new cluster (com14) , use the command:</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> -&gt; </span><span style="color: rgb(255,0,0);">savu_mpi_big &lt;full-path-input&gt; &lt;processing-list&gt; &lt;full-path-output&gt;          : No more valid for I12, I13, but may still valid for other beamlines (B16, I23...)</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">- <span style="color: rgb(0,0,255);">To show options of the command: </span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,255);"><span style="color: rgb(0,0,0);"> -&gt;</span> <span style="color: rgb(255,0,0);">savu -help</span></span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><strong>4- Managing jobs running on cluster:</strong></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">   For jobs running on cluster, use the following commands to manage them:</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">   - Open a terminal:</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> -&gt; <span style="color: rgb(255,0,0);">module load hamilton          : For i12, i13 data. </span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> -&gt; <span style="color: rgb(255,0,0);">module load global/cluster  : No more valid for i12, i13, but still valid for other beamlines.</span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> -&gt; <span style="color: rgb(255,0,0);">qstat</span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> -&gt; <span style="color: rgb(255,0,0);">watch qstat </span>      :live update job status. To exit use Ctrl+C</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> -To kill a job:</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> -&gt; <span style="color: rgb(255,0,0);">qdel &lt;job-ID&gt;</span></span></span></p><h1 id="SAVUTomographyReconstruction-II-Detailingguide"><strong><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">II-Detailing guide</span></span></strong></h1><p><strong><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">1- Use the latest plugins or local developing plugins:</span></span></strong></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">   There are two versions of savu available across Diamond: stable version (called by &quot;module load savu&quot;) and pre-released version (called by &quot;module load savu/pre-release&quot;). </span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">   There're number of developing plugins which are not available in these twos but available on github: <a class="external-link" href="https://github.com/DiamondLightSource/Savu" rel="nofollow">https://github.com/DiamondLightSource/Savu</a></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">   There're also plugins developed by beamline staffs which they may want to use locally. </span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> <span style="color: rgb(0,0,255);">  1.1- To use latest developing plugins:</span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,255);">       Easy way: </span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,255);">             <span style="color: rgb(255,0,0);">module load savu/pre-release</span></span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,255);"><span style="color: rgb(255,0,0);">      <span style="color: rgb(51,102,255);">Manual way:</span>      </span></span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">       + Open new terminal, navigate to a folder you would like to clone Savu codes:</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">       -&gt; <span style="color: rgb(255,0,0);">cd /dls/i12/data/2018/cm19662-5/processing/</span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">       -&gt; <span style="color: rgb(255,0,0);">git clone  <a class="external-link" href="https://github.com/DiamondLightSource/Savu.git" rel="nofollow"><span style="color: rgb(255,0,0);">https://github.com/DiamondLightSource/Savu.git</span></a></span>    : Create sub-folder named Savu and download all the codes to that.</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">       + Set Savu path to the new location (<span style="color: rgb(255,102,0);">you need to do that again if you open a new terminal</span>):</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">       -&gt; <span style="color: rgb(255,0,0);">export SAVUHOME='/dls/i12/data/2018/cm19662-5/processing/Savu'</span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(255,0,0);">       <span style="color: rgb(0,0,0);">+ Then you can use the latest plugins by methods in Quick Guide section.</span></span></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">   <span style="color: rgb(51,102,255);">1.2</span><span style="color: rgb(0,0,255);">- To use local plugins: do the same above steps; copy plugins into one of the sub-folder .../Savu/savu/plugins/&lt;sub-folder&gt;</span></span></span></span></span></p><p><strong><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,255);"><span style="color: rgb(0,0,0);">2- Standard processing list for I12:</span></span></span></span></span></span></strong></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">In general case:</span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"> </span></span>-------------------------------------------------------------------------------------</p><p>1) NxtomoLoader <br/>-------------------------------------------------------------------------------------<br/>2) DarkFlatFieldCorrection <br/>-------------------------------------------------------------------------------------<br/>3) DezingerSinogram <br/>-------------------------------------------------------------------------------------<br/>4) RemoveAllRings<br/>-------------------------------------------------------------------------------------<br/>5) VoCentering  <br/>-------------------------------------------------------------------------------------<br/>6) AstraReconGpu <br/>-------------------------------------------------------------------------------------</p><p><span style="color: rgb(255,153,0);">Note that DezingerSinogram should be used after DarkFlatFieldCorrection (If use Dezinger plugin as a replacement, it should be used before <span style="color: rgb(255,153,0);">DarkFlatFieldCorrection</span>)</span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">If the sample is inside the field of view and the number of projection is standard (~ width of the image), users can use the &quot;gridrec&quot; method which can run locally on a machine without GPU</span></span></p><p><br/></p><p>-------------------------------------------------------------------------------------<br/>1) NxtomoLoader <br/>-------------------------------------------------------------------------------------<br/>2) DarkFlatFieldCorrection <br/>-------------------------------------------------------------------------------------<br/>3) DezingerSinogram <br/>-------------------------------------------------------------------------------------<br/>4) RemoveAllRings<br/>-------------------------------------------------------------------------------------<br/>5) VoCentering </p><p>-------------------------------------------------------------------------------------<br/>6) TomopyRecon <br/>-------------------------------------------------------------------------------------</p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">If there's distortion:</span></span></p><p><br/></p><p>-------------------------------------------------------------------------------------<br/>1) NxtomoLoader <br/>-------------------------------------------------------------------------------------<br/>2) DarkFlatFieldCorrection <br/>-------------------------------------------------------------------------------------<br/>3) DistortionCorrection <br/>-------------------------------------------------------------------------------------<br/>4) DezingerSinogram <br/>-------------------------------------------------------------------------------------<br/>5) RemoveAllRings <br/>-------------------------------------------------------------------------------------<br/>6) VoCentering <br/>-------------------------------------------------------------------------------------<br/>7) AstraReconGpu <br/>-------------------------------------------------------------------------------------</p><p><strong>3- Previewing few slices:</strong></p><p>Users may want to reconstruct few slices for previewing. Open the processing list (or config-file) and edit the loader plugin:</p><p>-&gt; <span style="color: rgb(255,0,0);">mod 1.1 [:,mid,:] </span>                       : Reconstruct the middle slice of a 3D dataset.</p><p>-&gt; <span style="color: rgb(255,0,0);">mod 1.1 [:,end,:] </span>                       : Reconstruct the last slice of a 3D dataset.</p><p>-&gt;<span style="color: rgb(255,0,0);"> mod 1.1 [:,start:stop:step,:] </span>       : Reconstruct slices in the range of (start, stop, step). Note as the python tradition, stop index isn't included.</p><p><strong>4-Use few sinograms for calculating center of rotations:</strong></p><p>In VoCentering plugin, for I12 (which is well aligned), users only need to use fews middle slices for calculating center of rotation: </p><p>-&gt; <span style="color: rgb(255,0,0);">mod 5.1 [:,mid-3:mid+4,:]</span></p><p>-&gt; <span style="color: rgb(255,0,0);">disp 5 -a -v</span></p><p><span style="color: rgb(255,0,0);">----</span></p><p>5) VoCentering(savu.plugins.centering.vo_centering) <br/><span style="color: rgb(0,204,255);">A plugin to find the center of rotation per frame.</span> <br/>1) preview : [:,mid-3:mid+4,:]<br/><span style="color: rgb(0,204,255);">A slice list of required frames (sinograms) to use in the calulation of the</span><br/><span style="color: rgb(0,204,255);"> centre of rotation (this will not reduce the data size for subsequent plugins).</span><br/>2) start_pixel : None<br/><span style="color: rgb(0,204,255);">The estimated centre of rotation. If value is None, use the horizontal centre of</span><br/><span style="color: rgb(0,204,255);"> the image.</span><br/>3) search_area : [-50, 50]<br/><span style="color: rgb(0,204,255);">Search area around the estimated centre of rotation .</span><br/>4) ratio : 0.5<br/><span style="color: rgb(0,204,255);">The ratio between the size of object and FOV of the camera.</span><br/>5) in_datasets : []<br/><span style="color: rgb(0,204,255);">Create a list of the dataset(s) to process.</span><br/>6) row_drop : 20<br/><span style="color: rgb(0,204,255);">Drop lines around vertical center of the mask.</span><br/>7) broadcast_method : median<br/><span style="color: rgb(0,204,255);">Method of broadcasting centre values calculated from preview slices to full</span><br/><span style="color: rgb(0,204,255);"> dataset. Available option: 'median', 'mean', 'nearest', 'linear_fit'.</span><br/>8) out_datasets : [cor_preview, cor_broadcast]<br/><span style="color: rgb(0,204,255);">The default names .</span><br/>9) datasets_to_populate : []<br/><span style="color: rgb(0,204,255);">A list of datasets which require this information.</span><br/>10) search_radius : 6<br/><span style="color: rgb(0,204,255);">Use for fine searching.</span><br/>11) step : 0.5<br/><span style="color: rgb(0,204,255);">Step of fine searching.</span><br/>12) average_radius : 0<br/><span style="color: rgb(0,204,255);">Averaging sinograms around a required sinogram to improve signal-to-noise ratio.</span></p><p><span style="color: rgb(0,204,255);">----</span></p><p>There're a lot of parameters, but only twos need to be changed often:</p><p> - If the center of rotation is out of the searching range, users may need to increase the range of parameter 3. </p><p> - If sample is very small, users may need to reduce value of parameter 6.</p><p>VoCentering should be used:</p><p>- After the ring removal step.</p><p>- Before doing parameter turning of a plugin (otherwise, center is calculated again for each parameter).</p><p>- Before Paganin filter (which blurs sinograms → affect the quality performance of VoCentering).</p><p>-&gt;<span style="color: rgb(255,0,0);"> Note that preview in VoCentering has to be consistent with NxTomoloader. </span></p><p><span style="color: rgb(255,0,0);">For example, if NxtomoLoader only gives one slice [:,mid,:] to the next plugin, you have to do the same with Vocentering preview -&gt; [:,mid,:] or simply just use &quot;[]&quot;</span></p><p><strong>5-Use low-pass filters for improving the contrast of reconstructed images:</strong></p><p>There are two options: Paganin Filter and Fresnel Filter (available using module load savu/master).</p><p>PaganinFilter works on projection space with a number of parameters based on the experiment conditions: X-ray energy, Camera-Sample distance, pixel size; and a tuning parameter &quot;Ratio&quot;.</p><p><span style="color: rgb(255,102,0);">Users need to set the &quot;log&quot; option in the reconstruction plugin (AstraReconGpu, TomopyRecon..) to False</span></p><p>FresnelFilter works on sinogram space with a single tunable parameter.</p><p><span style="color: rgb(255,102,0);">Users don't have to set the &quot;log&quot; option to False. </span></p><p><span style="color: rgb(0,0,0);"><strong>6-Use the 360-scanning technique to double the field-of-view:</strong></span></p><p><span style="color: rgb(255,102,0);"><span style="color: rgb(0,0,255);">-&gt;Add the plugin Convert360180Sinogram (available using module load savu/master)</span><br/></span></p><p>1) Convert360180Sinogram(savu.plugins.corrections.convert_360_180_sinogram) </p><p><span style="color: rgb(0,204,255);">A plugin working in sinogram space to convert 0-360 degree\.</span> <br/>1) in_datasets : []<br/><span style="color: rgb(0,204,255);">Create a list of the dataset(s) to process.</span><br/>2) out_datasets : [in_datasets[0], <span style="color: rgb(255,0,0);">cor</span>]<br/><span style="color: rgb(0,204,255);">Create a list of the dataset(s) to create.</span><br/>3) center : 1270<br/><span style="color: rgb(0,204,255);">Center of rotation.</span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,255);">-&gt; Change the parameter &quot;centre of rotation&quot; in the reconstruction plugin (TomopyRecon) to</span><strong> </strong><strong><span style="color: rgb(255,0,0);">cor</span></strong></span></span></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,255);">-&gt; Change the parameter &quot;in_datasets&quot; of whatever plugin goes right after it to<strong> </strong><span style="color: rgb(255,0,0);"><strong>[tomo]</strong> <span style="color: rgb(0,0,0);">: </span> <span style="color: rgb(0,0,0);">The reason is that this plugin passes two datasets down to the pipeline, so for the next plugin we need to specify which dataset is tomographic data.</span></span></span></span></span></p><p><br/></p><p><span style="color: rgb(255,0,0);"><span style="color: rgb(0,0,0);">The plugin of automatically finding center of rotation (CoR) is developing and not available yet. In the mean time, users have to do parameter tuning and do visual inspection to find the best center of rotation.</span></span></p><p><span style="color: rgb(0,0,0);">For example, modify parameter 3 for coarse search</span></p><p>3) center : 1270:1320:5;</p><p>then fine search (after visual inspection):</p><p><span style="color: rgb(0,0,0);">3) center : 1275:1280:1;</span></p><p><br/></p><p>Example of the processing list:</p><p>-------------------------------------------------------------------------------------<br/>1) NxtomoLoader <br/>-------------------------------------------------------------------------------------<br/>2) DarkFlatFieldCorrection <br/>-------------------------------------------------------------------------------------<br/>3) DezingerSinogram <br/>-------------------------------------------------------------------------------------<br/>4) RemoveAllRings <br/>-------------------------------------------------------------------------------------<br/>5) Convert360180Sinogram <br/>-------------------------------------------------------------------------------------<br/>6) TomopyRecon <br/>-------------------------------------------------------------------------------------</p><p><strong>7-Process time-series tomographic data (4D):</strong></p><p>For 4D data we need to modify the preview parameter of NxtomoLoader. Example:</p><p>1)NxtomoLoader <br/>   1) preview : [:, mid:mid+1, :, 1]    </p><p><span style="color: rgb(0,0,255);">         → The last index indicates the order of a 3D frame. Change to [:, mid:mid+1, :, :] for all frames</span>   <br/>   ...<br/>   4) 3d_to_4d : 600   </p><p>         <span style="color: rgb(0,0,255);">→ Number of projections per 180-degree scanning</span><br/>   5) flat : [/dls/i12/data/2019/mg22627-1/tmp/raw/scan_00003/flats_00000.hdf, entry/data/data, 1] </p><p><span style="color: rgb(0,0,255);">         → Format [&lt;path_to_file&gt;, &lt;hdf_key&gt;, &lt;multiple_factor&gt;]. Default key of a hdf file generated by i12 detectors is entry/data/data</span><br/>   ...<br/>   7) dark : [/dls/i12/data/2019/mg22627-1/tmp/raw/scan_00003/darks_00000.hdf, entry/data/data, 1]</p><p><br/>We need to change the preview parameter of the Vocentering as well.</p><p>3) VoCentering <br/>      1) preview : [:, mid, :, 0] </p><p><span style="color: rgb(0,0,255);">→ Index 0 is used because the above NxtomoLoader passes only 1 tomo-frame to this plugin. Depend on the loaded data this index can be changed to process different tomo-frame.</span></p><p><br/></p><p><span style="color: rgb(0,0,0);">Full processing list:</span></p><p><span style="color: rgb(0,0,0);">------------------------------------------------------------------------------------<br/>1) NxtomoLoader <br/>    1) preview : [:, mid:mid+1, :, 1]<br/>    2) image_key_path : entry1/tomo_entry/instrument/detector/image_key<br/>    3) name : tomo<br/>    4) 3d_to_4d : 600<br/>    5) flat : [/dls/i12/data/2019/mg22627-1/tmp/raw/scan_00003/flats_00000.hdf, entry/data/data, 1]<br/>    6) data_path : entry1/tomo_entry/data/data<br/>    7) dark : [/dls/i12/data/2019/mg22627-1/tmp/raw/scan_00003/darks_00000.hdf, entry/data/data, 1]<br/>    8) angles : None<br/>    9) ignore_flats : None<br/>-------------------------------------------------------------------------------------<br/>2) DarkFlatFieldCorrection <br/>-------------------------------------------------------------------------------------<br/>3) VoCentering <br/>    1) preview : [:, mid, :, 0]<br/>...<br/>-------------------------------------------------------------------------------------<br/>4) RemoveAllRings <br/>-------------------------------------------------------------------------------------<br/>5) AstraReconGpu <br/>-------------------------------------------------------------------------------------</span></p><h1 id="SAVUTomographyReconstruction-Acknowledgement"><strong><span style="color: rgb(0,0,0);">Acknowledgement</span></strong></h1><p><span style="color: rgb(255,0,0);"><strong>Please credit by not only citing Savu paper but also methods used in the plugins</strong></span></p><p><span style="color: rgb(0,0,0);">- For using Savu: </span></p><p><span style="color: rgb(0,0,0);"><span style="color: rgb(34,34,34);">        Wadeson and M. Basham, “Savu: a Python-based, MPI framework for simultaneous processing of multiple, N-dimensional, large tomography datasets,” (2016) <a class="external-link" href="https://arxiv.org/abs/1610.08015" rel="nofollow">https://arxiv.org/abs/1610.08015</a>.</span></span></p><p><span style="color: rgb(0,0,0);">- For using plugins in the Savu:</span></p><p><span style="color: rgb(0,0,0);">      Information for citing methods in the plugin can be found on Savu github:</span></p><p><span style="color: rgb(0,0,0);">                <a class="external-link" href="https://github.com/DiamondLightSource/Savu/blob/master/savu/plugins/ring_removal/remove_all_rings.py" rel="nofollow">https://github.com/DiamondLightSource/Savu/blob/master/savu/plugins</a></span></p><p><span style="color: rgb(0,0,0);">      For example, citation for ring removal methods :</span></p><p><span style="color: rgb(0,0,0);">               <a class="external-link" href="https://github.com/DiamondLightSource/Savu/blob/master/savu/plugins/ring_removal/remove_all_rings.py" rel="nofollow">https://github.com/DiamondLightSource/Savu/blob/master/savu/plugins/ring_removal/remove_all_rings.py</a></span></p><p><span style="color: rgb(0,0,0);">     The citation information in the section <span style="color: rgb(36,41,46);"> &quot;</span><span class="pl-k" style="color: rgb(215,58,73);">def</span><span style="color: rgb(36,41,46);"> </span><span class="pl-en" style="color: rgb(111,66,193);">get_citation_information</span><span style="color: rgb(36,41,46);">(</span><span class="pl-s1" style="color: rgb(36,41,46);">self</span><span style="color: rgb(36,41,46);">)&quot;.</span></span></p><p><span style="color: rgb(0,0,0);"><span style="color: rgb(36,41,46);">     Another way of getting citation information:  from the output file &quot;..._processed.nxs&quot; of the Savu results (using hdfview: module load hdfview -&gt; hdfview):</span></span></p><p><span style="color: rgb(0,0,0);"><span style="color: rgb(36,41,46);">                                                        <span class="confluence-embedded-file-wrapper confluence-embedded-manual-size">

.. image:: ../../../files_and_images/confluence/I12/58592122/111022829.png

.. raw:: html


                        </span></p><p><span style="color: rgb(0,0,0);">

                        <span style="color: rgb(36,41,46);">
                        -  For methods in the reconstruction plugins (using Tomopy or Astra) please cite the software and the reconstruction methods as well:</span></span></p><p>If use <em>gridrec</em> (i.e direct Fourier inversion method) in Tomopy:</p><p>      [1] <span class="author">O'Sullivan JD</span><span>. &quot;</span><span class="articleTitle">A fast sinc function gridding algorithm for Fourier inversion in computer tomography&quot;,</span><span> </span><span class="journalTitle">IEEE T Med Imaging</span><span> </span><span class="pubYear">1985</span><span>; </span><span class="vol">4</span><span>: </span><span class="pageFirst">200</span><span>–</span><span class="pageLast">207.</span></p><p>      [2] Gürsoy D, De Carlo F, Xiao X, and Jacobsen C. &quot;Tomopy: a framework for the analysis of synchrotron tomographic data&quot;. Journal of Synchrotron Radiation, 21(5):1188–1193, 2014<span style="color: rgb(128,0,0);">   </span></p><p><span style="color: rgb(0,0,0);">If use other methods implemented in Astra toolbox:</span></p><p><span>      [1] <span style="color: rgb(64,64,64);">W. van Aarle, W. J. Palenstijn, J. Cant, E. Janssens, F. Bleichrodt, A. Dabravolski, J. De Beenhouwer, K. J. Batenburg, and J. Sijbers, “Fast and Flexible X-ray Tomography Using the ASTRA Toolbox”, </span><em>Optics Express</em><span style="color: rgb(64,64,64);">, 24(22), 25129-25147, (2016), </span></span></p><p><span style="color: rgb(153,51,0);">     <span style="color: rgb(0,128,128);">+ If use FBP:</span></span></p><p><span style="color: rgb(0,0,0);">            [2] G. N. Ramachandran and A. V. Lakshminarayanan, “Three dimensional reconstructions from radiographs and electron micrographs: Application of convolution instead of Fourier transforms,” Proc. Nat. Acad. Sci., vol. 68, pp. 2236-2240, 1971.</span></p><p>   <span style="color: rgb(0,128,128);"><span> </span> + If use SIRT:</span></p><p><span style="color: rgb(0,0,0);">           [3] </span>P. Gilbert, “Iterative methods for the reconstruction of three dimensional objects from their projections,” J. Theor. Biol., vol. 36, pp. 105-117, 1972.</p><p>     <span style="color: rgb(0,128,128);">+ If use SART:</span></p><p><span style="color: rgb(0,0,0);">           [4] </span>A. H. Andersen and A. C. Kak “Simultaneous algebraic reconstruction technique (SART): A superior implementation of the art algorithm,” Ultrason. Imaging,  vol 6,  81-94, 1984.</p><p>   <span> </span><span style="color: rgb(0,128,128);"> + If use CGLS:</span></p><p><span style="color: rgb(0,0,0);">           [5] </span>M. R. Hestenes and E. Stiefel. Methods of conjugate gradients for solving linear systems. Journal cf Research of the National Bureau of Standards, 49(6):409 – 436, 1952.</p><p><br/></p><p><span style="color: rgb(0,0,0);"><br/></span></p><p><br/></p>
                        </div>

                                                            <div class="pageSection group">


                    </div>             </div>

            </div>     </body>
    </html>
